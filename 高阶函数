1.回调函数

2.AOP（面向切面编程）比如测试函数的执行效率：
  var service = function(){
      console.log('功能逻辑...');
  }
  var test = (function(){
      var time_start;
      return {
          before: function(){
              time_start = (+new Date());
              console.log('计时开始...');
          },
          after: function(){
              var end = (+new Date()) - time_start;
              console.log('计时结束，用时：' + end);
          } 
      }
  })();
  var aop = function(fn, proxy){
      proxy.before && proxy.before();
      fn();
      proxy.after && proxy.after();
  }
  aop(service, test);
  
3.柯里化
  var currying = function(fn){
      var args = [];
      return function(){
          if(!!arguments.length) {
              [].push.apply(args, arguments);
              return arguments.callee;
          } else {
              return fn.apply(this, args);
          }
      }
  }
  var sum = (function(num){
      var ret = 0;
      return function(){
          for(var i = 0, len = arguments.length; i < len; i++) {
              ret += arguments[i];
          }
          return ret;
      }
  })();
  var newSum = currying(sum);
  newSum(1)(2)(3)(4)();
  
4.反柯里化
  Array.forEach = function(){
      var fn = [].pop.call(arguments);
      var arr = arguments.length > 1 ? arguments : arguments[0];
      return [].forEach.call(arr, fn);
  }
  Array.forEach(1, 2, 3, function(i){
      console.log(i);     // 1 2 3
  });
  Array.forEach('123', function(i){
      console.log(i);     // 1 2 3
  });
  Array.forEach({
      '0': 1,
      '1': 2,
      '2': 3,
      'length': 3
  }, function(i){
      console.log(i);     // 1 2 3
  });
  
5.函数节流（当页面滚动到底部时，会触发 Ajax 去请求数据；当页面滚动频繁时，就可能出现上个请求还未结束又开始了一个新的请求。
这个时候就需要用函数节流了）：
  var getData = (function(){
      var onAjax = false;     // 是否开始 ajax
      return function(callback){
          if(!onAjax) {
              onAjax = true;
              $.get('/xxx', function(data){
                  callback(data);
                  onAjax = false;
              });
          }
      }
  })();
  $(window).scroll(function(){
      if(滚动到底部) {
          getData(render);
       }
  });

6.分时函数
  //  arr: 源数据
  //  process: 处理函数
  //  count: 每次抽取个数
  var chunk = function(arr, process, count){
      setTimeout(function(){
          for(var i = 0; i < Math.min(count, arr.length); i++) {
              process(arr.shift());
          }
          if(arr.length > 0) {
              setTimeout(arguments.callee, 100);
          }
      }, 100);
  }
  
7.惰性加载
  var goToTop = (function(){
      var isFF = /firefox/i.test(navigator.userAgent);
      var docEl = document[ isFF ? 'documentElement' : 'body' ];
      return function(){
          docEl.scrollTop = 0;
      }
  })();

8.阶乘函数（这样即使将fac赋给另一个变量也能正常运行）
  var fac=(function f(num){
      if(num<=1){
          return 1;
      }else{
          return num*f(num-1)
      }
  })

9.地址参数
  function query(){
      var qs=(location.search.length>0?location.search.slice(1):''),
      args={},
      items=qs.length?qs.split('&'):[],
      item=null,
      name=null,
      value=null,
      i=0,
      len=items.length;
      for(i=0;i<len;i++){
          item=items[i].split('=');
          name=decodeURIComponent(item[0]);
          value=decodeURIComponent(item[1]);
          if(name.length){
              args[name]=value;
          }
      }
      return args
  }

10.改连字符为驼峰写法
   function camelStr (str){
       return str.replace(/\-(\w)/g, function (match,originText) {
           return originText.toUpperCase();
       });
   }

11.判断为质数返回true，否则返回false
    function isPrime(number) {
       // If your browser doesn't support the method Number.isInteger of ECMAScript 6,
       // you can implement your own pretty easily
       if (typeof number !== 'number' || !Number.isInteger(number)) {
          // Alternatively you can throw an error.
          return false;
       }
       if (number < 2) {
          return false;
       }

       if (number === 2) {
          return true;
       } else if (number % 2 === 0) {
          return false;
       }
       var squareRoot = Math.sqrt(number);
       for(var i = 3; i <= squareRoot; i += 2) {
          if (number % i === 0) {
             return false;
          }
       }
       return true;
    }
    
12.获取某月的天数
    function getDays(year, month){   //注意当月月份为month+1
        month = parseInt(month, 10);  
        var d= new Date(year, month, 0);  // 上个月最后一天
        return d.getDate();  
    }  
