1.判断是否是回文
    function isHui(str){
        return str==str.split('').reverse().join('');
    };
    
2.去重
    function unique(arr){
        let obj={};
        let data=[];
        for(let i=0,l=arr.length;i<l;i++){
            if(!obj[arr[i]]){
                obj[arr[i]]=true;
                data.push(arr[i]);
            }
        }
        return data;
    }
    
3.每个字符出现的次数
    var info = str.split('').reduce((p, k) => (p[k]++ || (p[k] = 1), p), {});
    或
    function charStats(str) {
        var visitStats = {};
        for (var i = 0; i < str.length; i++) {
            var char = str[i];
            if (!visitStats[char]++)
                visitStats[char] = 1;
        }
        return visitStats;
    }
    
4.快速排序
    function quickSort(arr) {
        if(arr.length<=1) {
            return arr;
        }
        let leftArr = [];
        let rightArr = [];
        let q = arr[0];
        for(let i = 1,l=arr.length; i<l; i++) {
            if(arr[i]>q) {
                rightArr.push(arr[i]);
            }else{
                leftArr.push(arr[i]);
            }
        }
        return [].concat(quickSort(leftArr),[q],quickSort(rightArr));
    }

5.对换两个整数
    function swap(a,b){
        b=b-a;
        a=a+b;
        b=a-b;
        return [a,b];
    }
    es6也支持[a,b]=[b,a];
    
6.斐波那契数组
    function fibonacci(n){
        var fibarr=[];
        var i=0;
        while(i<n){
            if(i<=1){
                fibarr.push(1);
            }else{
                fibarr.push(fibarr[i-1]+fibarr[i-2])
            }
            i++;
        }
        return fibarr;
    }
    
    // 最佳实践，函数表达式
    var factorial = (function f(num) {
        if (num <= 1) {
            return 1;
        } else {
           return num * f(num - 1);
        }
    });

7.使用!!将变量转换成布尔类型,它能自动将任何类型的数据转换为布尔值.在我们需要判断某个变量是否存在时就可以用;

8.使用+将变量转换成数字,+new Date()可以直接返回时间戳;

9.使用||设置默认值;

10.检测对象中的属性，要检查这个函数是否存在，你可以使用in运算符。如if ('querySelector' in documents) {};

11.获取数组的最后一个元素,Array.prototype.slice(-1);

12.数组截断,arr.length = 10;

13.全部替换,String.replace(/abc/g, 'd');

14.合并数组,arr1.concat(arr2)不会改变原数组，Array.push.apply（arr1，arr2），它不会创建一个新数组，而是将第二个数组合并到第一个数组中，以减少内存使用。

15.把NodeList转换成数组,[] .slice.call（elements）或者Array.from(elements);

16.打乱数组,arr.sort(function() {return Math.random() - 0.5;});
