1.单体模式（用一个命名空间包含自己的所有代码的全局对象）
  var obj={
      name:'',
      foo:function(){}
  }
  
2.工厂（Factory）模式：提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类。
  function createPerson(name){
      var o=new Object();
      o.name=name;
      return o;
  }
  var p1=createPerson('cc');
  
3.构造函数模式
  function Person(name){
      this.name=name;
  }
  var p1=new Person('cc');
  
4.原型模式
  function Person(){
  }
  Person.prototype={
      name:'cc',
      say:function(){
          alert(this.name);
      }
  };
  var p1=new Person();
  
5.组合使用构造函数模式和原型模式
  function Person(name){
      this.name=name;
  }
  Person.prototype={
      say:function(){
          alert(this.name);
      }
  };
  var p1=new Person('cc');
  
  6.动态原型模式
  
  7.寄生构造函数模式
    function Person(name){
        var o=new Object();
        o.name=name;
        return o;
    }
    var p1=new Person('cc');
  
  8.稳妥构造函数模式
